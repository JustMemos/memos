// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/nest_service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NestService_CreateNest_FullMethodName   = "/memos.api.v1.NestService/CreateNest"
	NestService_ListNests_FullMethodName    = "/memos.api.v1.NestService/ListNests"
	NestService_GetNest_FullMethodName      = "/memos.api.v1.NestService/GetNest"
	NestService_GetNestByUid_FullMethodName = "/memos.api.v1.NestService/GetNestByUid"
	NestService_UpdateNest_FullMethodName   = "/memos.api.v1.NestService/UpdateNest"
	NestService_DeleteNest_FullMethodName   = "/memos.api.v1.NestService/DeleteNest"
)

// NestServiceClient is the client API for NestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NestServiceClient interface {
	// CreateNest creates a new nest.
	CreateNest(ctx context.Context, in *CreateNestRequest, opts ...grpc.CallOption) (*Nest, error)
	// ListNests lists all nests.
	ListNests(ctx context.Context, in *ListNestsRequest, opts ...grpc.CallOption) (*ListNestsResponse, error)
	// GetNest returns a nest by name.
	GetNest(ctx context.Context, in *GetNestRequest, opts ...grpc.CallOption) (*Nest, error)
	// GetNestByUid returns a nest by uid.
	GetNestByUid(ctx context.Context, in *GetNestByUidRequest, opts ...grpc.CallOption) (*Nest, error)
	// UpdateNest updates a nest.
	UpdateNest(ctx context.Context, in *UpdateNestRequest, opts ...grpc.CallOption) (*Nest, error)
	// DeleteNest deletes a nest by name.
	DeleteNest(ctx context.Context, in *DeleteNestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type nestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNestServiceClient(cc grpc.ClientConnInterface) NestServiceClient {
	return &nestServiceClient{cc}
}

func (c *nestServiceClient) CreateNest(ctx context.Context, in *CreateNestRequest, opts ...grpc.CallOption) (*Nest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nest)
	err := c.cc.Invoke(ctx, NestService_CreateNest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nestServiceClient) ListNests(ctx context.Context, in *ListNestsRequest, opts ...grpc.CallOption) (*ListNestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNestsResponse)
	err := c.cc.Invoke(ctx, NestService_ListNests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nestServiceClient) GetNest(ctx context.Context, in *GetNestRequest, opts ...grpc.CallOption) (*Nest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nest)
	err := c.cc.Invoke(ctx, NestService_GetNest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nestServiceClient) GetNestByUid(ctx context.Context, in *GetNestByUidRequest, opts ...grpc.CallOption) (*Nest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nest)
	err := c.cc.Invoke(ctx, NestService_GetNestByUid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nestServiceClient) UpdateNest(ctx context.Context, in *UpdateNestRequest, opts ...grpc.CallOption) (*Nest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nest)
	err := c.cc.Invoke(ctx, NestService_UpdateNest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nestServiceClient) DeleteNest(ctx context.Context, in *DeleteNestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NestService_DeleteNest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NestServiceServer is the server API for NestService service.
// All implementations must embed UnimplementedNestServiceServer
// for forward compatibility.
type NestServiceServer interface {
	// CreateNest creates a new nest.
	CreateNest(context.Context, *CreateNestRequest) (*Nest, error)
	// ListNests lists all nests.
	ListNests(context.Context, *ListNestsRequest) (*ListNestsResponse, error)
	// GetNest returns a nest by name.
	GetNest(context.Context, *GetNestRequest) (*Nest, error)
	// GetNestByUid returns a nest by uid.
	GetNestByUid(context.Context, *GetNestByUidRequest) (*Nest, error)
	// UpdateNest updates a nest.
	UpdateNest(context.Context, *UpdateNestRequest) (*Nest, error)
	// DeleteNest deletes a nest by name.
	DeleteNest(context.Context, *DeleteNestRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedNestServiceServer()
}

// UnimplementedNestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNestServiceServer struct{}

func (UnimplementedNestServiceServer) CreateNest(context.Context, *CreateNestRequest) (*Nest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNest not implemented")
}
func (UnimplementedNestServiceServer) ListNests(context.Context, *ListNestsRequest) (*ListNestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNests not implemented")
}
func (UnimplementedNestServiceServer) GetNest(context.Context, *GetNestRequest) (*Nest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNest not implemented")
}
func (UnimplementedNestServiceServer) GetNestByUid(context.Context, *GetNestByUidRequest) (*Nest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNestByUid not implemented")
}
func (UnimplementedNestServiceServer) UpdateNest(context.Context, *UpdateNestRequest) (*Nest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNest not implemented")
}
func (UnimplementedNestServiceServer) DeleteNest(context.Context, *DeleteNestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNest not implemented")
}
func (UnimplementedNestServiceServer) mustEmbedUnimplementedNestServiceServer() {}
func (UnimplementedNestServiceServer) testEmbeddedByValue()                     {}

// UnsafeNestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NestServiceServer will
// result in compilation errors.
type UnsafeNestServiceServer interface {
	mustEmbedUnimplementedNestServiceServer()
}

func RegisterNestServiceServer(s grpc.ServiceRegistrar, srv NestServiceServer) {
	// If the following call pancis, it indicates UnimplementedNestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NestService_ServiceDesc, srv)
}

func _NestService_CreateNest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NestServiceServer).CreateNest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NestService_CreateNest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NestServiceServer).CreateNest(ctx, req.(*CreateNestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NestService_ListNests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NestServiceServer).ListNests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NestService_ListNests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NestServiceServer).ListNests(ctx, req.(*ListNestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NestService_GetNest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NestServiceServer).GetNest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NestService_GetNest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NestServiceServer).GetNest(ctx, req.(*GetNestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NestService_GetNestByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNestByUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NestServiceServer).GetNestByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NestService_GetNestByUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NestServiceServer).GetNestByUid(ctx, req.(*GetNestByUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NestService_UpdateNest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NestServiceServer).UpdateNest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NestService_UpdateNest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NestServiceServer).UpdateNest(ctx, req.(*UpdateNestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NestService_DeleteNest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NestServiceServer).DeleteNest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NestService_DeleteNest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NestServiceServer).DeleteNest(ctx, req.(*DeleteNestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NestService_ServiceDesc is the grpc.ServiceDesc for NestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "memos.api.v1.NestService",
	HandlerType: (*NestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNest",
			Handler:    _NestService_CreateNest_Handler,
		},
		{
			MethodName: "ListNests",
			Handler:    _NestService_ListNests_Handler,
		},
		{
			MethodName: "GetNest",
			Handler:    _NestService_GetNest_Handler,
		},
		{
			MethodName: "GetNestByUid",
			Handler:    _NestService_GetNestByUid_Handler,
		},
		{
			MethodName: "UpdateNest",
			Handler:    _NestService_UpdateNest_Handler,
		},
		{
			MethodName: "DeleteNest",
			Handler:    _NestService_DeleteNest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/nest_service.proto",
}
